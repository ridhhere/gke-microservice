# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: SpringBoot CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: cluster-demo-1    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        server-id: docker.io
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD        

    - name: Build and Push user-service
      run: |
        cd /home/runner/work/deploy-microservice/deploy-microservice/user-service
        mvn clean package
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ridhdocker/user-service:0.0.1 .
        docker push ridhdocker/user-service:0.0.1
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push department-service
      run: |
          cd /home/runner/work/deploy-microservice/deploy-microservice/department-service
          mvn clean package
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ridhdocker/department-service:0.0.1 .
          docker push ridhdocker/department-service:0.0.1
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push cloud-config-server
      run: |
          cd /home/runner/work/deploy-microservice/deploy-microservice/cloud-config-server
          mvn clean package
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ridhdocker/cloud-config-server:0.0.1 .
          docker push ridhdocker/cloud-config-server:0.0.1
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push cloud-gateway
      run: |
          cd /home/runner/work/deploy-microservice/deploy-microservice/cloud-gateway
          mvn clean package
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ridhdocker/cloud-gateway:0.0.1 .
          docker push ridhdocker/cloud-gateway:0.0.1
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push hystrix-dashboard
      run: |
          cd /home/runner/work/deploy-microservice/deploy-microservice/hystrix-dashboard
          mvn clean package
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ridhdocker/hystrix-dashboard:0.0.1 .
          docker push ridhdocker/hystrix-dashboard:0.0.1
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push service-registry
      run: |
          cd /home/runner/work/deploy-microservice/deploy-microservice/service-registry
          mvn clean package
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ridhdocker/service-registry:0.0.1 .
          docker push ridhdocker/service-registry:0.0.1
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  Deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: kubectl - Google Cloud GKE cluster.
      uses: ameydev/gke-kubectl-action@master
      env:
        PROJECT_ID: ${{ env.PROJECT_ID }}
        APPLICATION_CREDENTIALS: ${{ secrets.GKE_SA_KEY }}
        CLUSTER_NAME: ${{ env.GKE_CLUSTER }}
        ZONE_NAME: ${{ env.GKE_ZONE }}
      with:
        args: apply -f k8s/




